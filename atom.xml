<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sudix's Blog]]></title>
  <link href="http://sudix.github.io/atom.xml" rel="self"/>
  <link href="http://sudix.github.io/"/>
  <updated>2013-10-23T15:39:28+09:00</updated>
  <id>http://sudix.github.io/</id>
  <author>
    <name><![CDATA[sudix]]></name>
    <email><![CDATA[sudix7755@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[ruby] Rubyで関数合成できるLambdaDriverがかっこよすぎる]]></title>
    <link href="http://sudix.github.io/blog/2013/10/23/ruby-lambda-driver/"/>
    <updated>2013-10-23T15:30:00+09:00</updated>
    <id>http://sudix.github.io/blog/2013/10/23/ruby-lambda-driver</id>
    <content type="html"><![CDATA[<p>Rubyで関数合成できると便利なのになぁという場面に出くわして、以前に見て知っていたけど試したことはなかったLambdaDriverを触ってみた。</p>

<p><a href="http://yuroyoro.hatenablog.com/entry/2013/03/27/190640">( ꒪⌓꒪) ゆるよろ日記 &ndash; Rubyで関数合成とかしたいので lambda_driver.gem というのを作った</a></p>

<h3>install</h3>

<p>gem install lambda_driver</p>

<h3>サンプル</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;lambda_driver&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">add_hoge</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="s2">&quot;hoge&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">add_fuga</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="s2">&quot;fuga&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &gt;&gt;で合成</span>
</span><span class='line'><span class="n">add_hoge_fuga</span> <span class="o">=</span> <span class="n">add_hoge</span> <span class="o">&gt;&gt;</span> <span class="n">add_fuga</span>
</span><span class='line'><span class="c1"># &lt; で実行（callの別名)</span>
</span><span class='line'><span class="n">add_hoge_fuga</span> <span class="o">&lt;</span> <span class="s2">&quot;piyo&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;piyohogefuga&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># &lt;&lt;で逆順で合成</span>
</span><span class='line'><span class="n">add_fuga_hoge</span> <span class="o">=</span> <span class="n">add_hoge</span> <span class="o">&lt;&lt;</span> <span class="n">add_fuga</span>
</span><span class='line'><span class="n">add_fuga_hoge</span> <span class="o">&lt;</span> <span class="s2">&quot;piyo&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;piyofugahoge&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>かっこよすぎるやろ！でも仕事のコードで使ったら顰蹙物だろうなぁ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOSでrbenvを使ってバッチのRubyバージョンを切り替える]]></title>
    <link href="http://sudix.github.io/blog/2013/10/18/use-rbenv-on-cron/"/>
    <updated>2013-10-18T20:47:00+09:00</updated>
    <id>http://sudix.github.io/blog/2013/10/18/use-rbenv-on-cron</id>
    <content type="html"><![CDATA[<h1>Motivation</h1>

<p>Ruby1.8.7で作った大量のバッチがある。
それを1.9（さらには2.0）に移行していきたいんだけど、
一気に移行するまで待ってると時間がかかるので、
少しずつ移行したい。また、同じサーバ内で並行運用したい。
そこで、rbenvで複数のRuby環境を用意し、切り替えて運用したい。
バッチは全てcronで動いているので、cron環境でのPATHをうまく設定すればいけるはず。</p>

<h1>環境</h1>

<p>CentOS6.4</p>

<h1>事前準備</h1>

<h2>gitをインストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum install git
</span></code></pre></td></tr></table></div></figure>


<h2>epelをインストール</h2>

<p>後で必要になるライブラリを入れるため、EPELを追加しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /usr/local/src
</span><span class='line'>wget http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
</span><span class='line'>rpm -ivh epel-release-6-8.noarch.rpm
</span></code></pre></td></tr></table></div></figure>


<h1>rbenv</h1>

<p>参考：<a href="http://nomnel.net/blog/centos-system-wide-rbenv-and-ruby-build/">CentOSでsystem wideなrbenv+ruby-build環境を構築する</a></p>

<h2>rbenvをインストール</h2>

<p>rbenvとruby-buildを/usr/localの下にインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>su -
</span><span class='line'><span class="nb">cd</span> /usr/local
</span><span class='line'>git clone git://github.com/sstephenson/rbenv.git rbenv
</span><span class='line'>mkdir rbenv/shims rbenv/versions
</span><span class='line'>groupadd rbenv
</span><span class='line'>chgrp -R rbenv rbenv
</span><span class='line'>chmod -R g+rwxXs rbenv
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git ruby-build
</span><span class='line'><span class="nb">cd </span>ruby-build
</span><span class='line'>./install.sh
</span></code></pre></td></tr></table></div></figure>


<h2>環境変数を設定</h2>

<p>グローバルな環境変数にrbenvへのパスを追加。</p>

<p>vi /etc/profile.d/rbenv.sh</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">RBENV_ROOT</span><span class="o">=</span><span class="s2">&quot;/usr/local/rbenv&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/usr/local/rbenv/bin:$PATH&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>書いたら読み込みます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">source</span> /etc/profile.d/rbenv.sh
</span></code></pre></td></tr></table></div></figure>


<h2>インストール可能なruby一覧を見てみる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rbenv install --list
</span></code></pre></td></tr></table></div></figure>


<h2>ruby install</h2>

<h3>依存ライブラリのインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum install --enablerepo<span class="o">=</span>epel make gcc zlib-devel openssl-devel readline-devel ncurses-devel gdbm-devel db4-devel libffi-devel tk-devel libyaml-devel
</span></code></pre></td></tr></table></div></figure>


<h3>ruby自体のインストール</h3>

<p>ここでは以下の3つのバージョンを入れてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rbenv install 1.8.7-p374
</span><span class='line'>rbenv install 1.9.3-p448
</span><span class='line'>rbenv install 2.0.0-p247
</span></code></pre></td></tr></table></div></figure>


<h4>（Dockerの場合のみ）fdのシンボリックリンク作成</h4>

<p>Docker上のCentOS6.4で試していたらエラーが出るので、以下のコマンド実行</p>

<p>参考:<a href="https://github.com/sstephenson/rbenv/issues/401">unable to set global or or local ruby on freebsd</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ln -s /proc/self/fd /dev/fd
</span></code></pre></td></tr></table></div></figure>


<h3>インストールされたrubyの確認</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rbenv versions
</span></code></pre></td></tr></table></div></figure>


<h3>globalのrubyバージョン設定</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rbenv global 1.9.3-p448
</span><span class='line'>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<h3>localのrubyバージョン設定</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rbenv <span class="nb">local </span>2.0.0-p247
</span><span class='line'>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<h3>rbenv-rehash,bundlerのインストール</h3>

<p>いちいちrehashするのも面倒なので、自動でrehashしてくれるrbenv-rehashを入れます。
ついでに後々必要になるbundlerも入れておきましょう。
インストールした全てのバージョンで行なっておく必要があります。</p>

<p>参考:<a href="http://shokai.org/blog/archives/7258">crontabでrbenvのrubyを使う</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>su -
</span><span class='line'>
</span><span class='line'>rbenv global 1.8.7-p374
</span><span class='line'>gem install rbenv-rehash
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>
</span><span class='line'>rbenv global 1.9.3-p448
</span><span class='line'>gem install rbenv-rehash
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>
</span><span class='line'>rbenv global 2.0.0-p247
</span><span class='line'>gem install rbenv-rehash
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<h1>Rubyバージョン設定</h1>

<h2>それぞれのディレクトリでrbenv local</h2>

<p>以下のようなディレクトリ構成で、batch_18はRuby1.8、
batch_19はRuby1.9で動かしたいとします。
exec_batch_a.shはバッチを起動するためのshellスクリプトです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/home/sudix
</span><span class='line'>└── batches
</span><span class='line'>    ├── batch_18
</span><span class='line'>    │   ├── batch_a.rb
</span><span class='line'>    │   ├── exec_batch_a.sh
</span><span class='line'>    │   └── Gemfile
</span><span class='line'>    └── batch_19
</span><span class='line'>        ├── batch_a.rb
</span><span class='line'>        ├── exec_batch_a.sh
</span><span class='line'>        └── Gemfile
</span></code></pre></td></tr></table></div></figure>


<p>この場合、それぞれのディレクトリに入って、rbenv localでRubyのバージョンを指定します。
これで、それぞれのディレクトリに.ruby-versionが作成されるはずです。
同時にbundlerでgemを入れておきますが、ここではpathを指定せず、グローバルに入れていしまいます。
このあたりは必要に応じて変えてください。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> /home/sudix/batches/batch_18
</span><span class='line'>rbenv <span class="nb">local </span>1.8.7-p374
</span><span class='line'>su
</span><span class='line'><span class="nb">cd</span> /home/sudix/batches/batch_18
</span><span class='line'>bundle install
</span><span class='line'><span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> /home/sudix/batches/batch_19
</span><span class='line'>rbenv <span class="nb">local </span>1.9.3-p448
</span><span class='line'>su
</span><span class='line'><span class="nb">cd</span> /home/sudix/batches/batch_19
</span><span class='line'>bundle install
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Gemfileはここでは普通に作成していますが、クックパッドさんでは
バージョンごとのGemfileを作成して管理しているようで、参考になります。</p>

<p><a href="http://techlife.cookpad.com/2013/04/09/ruby200/">Cookpad の本番環境で使用している Ruby が 2.0.0-p0 になりました</a></p>

<h2>起動shell</h2>

<p>バッチ実行前に意図した.ruby-versionが有効となるディレクトリに移動したいので、
起動shellは以下のような感じにしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nv">dir</span><span class="o">=</span><span class="sb">`</span>dirname <span class="nv">$0</span><span class="sb">`</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$dir</span>
</span><span class='line'>
</span><span class='line'>ruby -e <span class="s2">&quot;require &#39;./batch_a.rb&#39;; BatchA.new.main&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure>


<h2>確認</h2>

<p>使いたいRubyが本当に使えているか、確認します。
BatchAのmainは、RUBY_VERSIONをputsするだけのメソッドです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span>
</span><span class='line'><span class="nv">$ </span>/home/sudix/batches/batch_18/exec_batch_a.sh
</span><span class='line'>1.8.7
</span><span class='line'><span class="nv">$ </span>/home/sudix/batches/batch_19/exec_batch_a.sh
</span><span class='line'>1.9.3
</span></code></pre></td></tr></table></div></figure>


<h1>cronの設定</h1>

<p>参考:<a href="http://shokai.org/blog/archives/7258">cronでのversion変更について</a></p>

<p>rbenvをglobalにインストールしているので、上記参考先とは
rbenvのbinとshimsのpathが異なるので注意してください。
PATHに/usr/local/rbenv/binと/usr/local/rbenv/shimsを追加します。</p>

<p>crontab -e</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">SHELL</span><span class="o">=</span>/bin/sh
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/usr/local/rbenv/bin:/usr/local/rbenv/shims:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
</span><span class='line'>
</span><span class='line'>0 * * * * /home/sudix/batches/batch_18/exec_batch_a.sh
</span><span class='line'>0 * * * * /home/sudix/batches/batch_19/exec_batch_a.sh
</span></code></pre></td></tr></table></div></figure>


<p>以上でcronから実行されるバッチのRubyバージョンを切り替えることができました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[書評] JavaScript The Definitive Guide 6th]]></title>
    <link href="http://sudix.github.io/blog/2013/09/13/javascript-the-definitive-guide-6th/"/>
    <updated>2013-09-13T16:37:00+09:00</updated>
    <id>http://sudix.github.io/blog/2013/09/13/javascript-the-definitive-guide-6th</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/9780596805531.do">http://shop.oreilly.com/product/9780596805531.do</a></p>

<p>あまりWEBのフロント側の開発を行ったことが無くてこれまでJavaScriptは避けていました。
prototypeとか見る度に変な言語だなぁと感じて、好きではなかったのもあります。
しかしついに使う場面がきそうなので、真面目に勉強することに。
JavaScriptの本と言えばサイ本と聞いたことがあったので、英語の勉強がてら原書を電子版を購入してみました。
気軽に読み始めたものの、700ページもあって読み終えるのに随分時間がかかりましたが、
想像以上の面白さでした。</p>

<p>最初は言語仕様についてひたすら書かれていますが、関数型言語としての側面も紹介されたりして、
Scalaを触っていた事もあり引きこまれました。
わけが分からないと思っていたprototypeも分かりやすく説明されています。
驚いたのが正規表現についてもやたら丁寧に説明されていること。
今まで読んできた正規表現関係の資料の中で一番良かったかも。</p>

<p>後半ではDOM操作やjquery、node.jsの紹介まであり、
さらに最後にはHTML5関連（local storageやWebSocket）にも触れられており、
満足感いっぱいです。</p>

<p>実は英語の本を最後まで読み通したのはこれが初めてだったりしますが、
使われている表現も平易で読みやすく、長文を読むのにも随分慣れた気がします。
その点でもおすすめ。</p>

<h3>結論</h3>

<p>評価：<strong><em>★★★★★</em></strong><br/>
JavaScriptを一からきっちり勉強したい方にとってもおすすめ。<br/>
ただプログラムの経験が無い人がこれで勉強するには難しいかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[coffeescript] 標準偏差を使って異常っぽい値を検知してみる]]></title>
    <link href="http://sudix.github.io/blog/2013/08/23/error-detect-with-standard-deviation/"/>
    <updated>2013-08-23T11:02:00+09:00</updated>
    <id>http://sudix.github.io/blog/2013/08/23/error-detect-with-standard-deviation</id>
    <content type="html"><![CDATA[<p>日々変わる数字があって、たまに異常に減ったり増えたりする場合があり、
それが起きたときにすぐわかるようにしたい。
という要望があったので、標準偏差を使ってエラーっぽい値が分かるようにしてみました。
ブラウザ上で実行する必要があったのでcoffeescriptです。</p>

<h2>コード</h2>

<p>checkRangeListメソッドにデータを与えると、下限以下なら-1、上限以上なら1を返します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">######################</span>
</span><span class='line'><span class="c1"># 異常値計算用クラス</span>
</span><span class='line'><span class="c1">######################</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nx">ErrorDataDetector</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">self = </span><span class="kc">undefined</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 平均からどれぐらい離れたら異常とみなすかの定数。</span>
</span><span class='line'>  <span class="c1"># ±（この値×標準偏差）から外れていれば異常とします。</span>
</span><span class='line'>  <span class="c1"># 2であればおよそ95%範囲の外の値になります。</span>
</span><span class='line'>  <span class="nv">normalRange = </span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">-&gt;</span> <span class="nv">self = </span><span class="k">this</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#平均を求める</span>
</span><span class='line'>  <span class="nv">average: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nx">data</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nf">(acc, n) -&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">n</span><span class="p">)</span> <span class="o">/</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#分散を求める</span>
</span><span class='line'>  <span class="c1">#((データ－平均値)の２乗)の総和÷ 個数</span>
</span><span class='line'>  <span class="nv">variance: </span><span class="nf">(data, avg) -&gt;</span>
</span><span class='line'>    <span class="nx">data</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nf">(acc, n) -&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">n</span> <span class="o">-</span> <span class="nx">avg</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="o">/</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#標準偏差を求める</span>
</span><span class='line'>  <span class="c1">#分散の平方根</span>
</span><span class='line'>  <span class="nv">standardDeviation: </span><span class="nf">(data, avg) -&gt;</span>
</span><span class='line'>    <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">variance</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">avg</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#外れ値かどうかを調べ、リストに結果を詰めて返す</span>
</span><span class='line'>  <span class="c1">#-1:範囲外(下) 0:正常 1:範囲外(上)</span>
</span><span class='line'>  <span class="nv">checkRangeList: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nv">avg = </span><span class="nx">self</span><span class="p">.</span><span class="nx">average</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">sd = </span><span class="nx">self</span><span class="p">.</span><span class="nx">standardDeviation</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">avg</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">lb = </span><span class="nx">self</span><span class="p">.</span><span class="nx">lowerBound</span><span class="p">(</span><span class="nx">avg</span><span class="p">,</span> <span class="nx">sd</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">ub = </span><span class="nx">self</span><span class="p">.</span><span class="nx">upperBound</span><span class="p">(</span><span class="nx">avg</span><span class="p">,</span> <span class="nx">sd</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">data</span><span class="p">.</span><span class="nx">map</span> <span class="nf">(n) -&gt;</span> <span class="nx">self</span><span class="p">.</span><span class="nx">checkRange</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">avg</span><span class="p">,</span> <span class="nx">lb</span><span class="p">,</span> <span class="nx">ub</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 下限境界</span>
</span><span class='line'>  <span class="nv">lowerBound: </span><span class="nf">(avg, sd) -&gt;</span> <span class="nx">avg</span> <span class="o">-</span> <span class="p">(</span><span class="nx">sd</span> <span class="o">*</span> <span class="nx">normalRange</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 上限境界</span>
</span><span class='line'>  <span class="nv">upperBound: </span><span class="nf">(avg, sd) -&gt;</span> <span class="nx">avg</span> <span class="o">+</span> <span class="p">(</span><span class="nx">sd</span> <span class="o">*</span> <span class="nx">normalRange</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">checkRange: </span><span class="nf">(n, avg, lb, ub) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">avg</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">n</span> <span class="o">&lt;=</span> <span class="nx">lb</span>
</span><span class='line'>      <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">n</span> <span class="o">&gt;=</span> <span class="nx">ub</span>
</span><span class='line'>      <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>実行結果</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">l = </span><span class="p">[</span><span class="mi">826</span><span class="p">,</span><span class="mi">751</span><span class="p">,</span><span class="mi">833</span><span class="p">,</span><span class="mi">905</span><span class="p">,</span><span class="mi">888</span><span class="p">,</span><span class="mi">950</span><span class="p">,</span><span class="mi">880</span><span class="p">,</span><span class="mi">868</span><span class="p">,</span><span class="mi">935</span><span class="p">,</span><span class="mi">1293</span><span class="p">,</span><span class="mi">1315</span><span class="p">,</span><span class="mi">1555</span><span class="p">,</span><span class="mi">1445</span><span class="p">,</span><span class="mi">1732</span><span class="p">,</span><span class="mi">1351</span><span class="p">,</span><span class="mi">1157</span><span class="p">,</span><span class="mi">1268</span><span class="p">,</span><span class="mi">1201</span><span class="p">,</span><span class="mi">733</span><span class="p">,</span><span class="mi">2000</span><span class="p">,</span><span class="mi">100</span><span class="p">]</span>
</span><span class='line'><span class="nv">d = </span><span class="k">new</span> <span class="nx">ErrorDataDetector</span><span class="p">()</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">checkRangeList</span><span class="p">(</span><span class="nx">l</span><span class="p">))</span>
</span><span class='line'> <span class="c1"># 結果 =&gt;　[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>オチ</h2>

<p>さっそく実装して試したところ異常っぽい値を検知できたので意気揚々と担当者に見せたところ、
よくわかんないからもっと簡単なロジックにしてと言われましたとさ・・・。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalaでエラトステネスの篩を実装してみる]]></title>
    <link href="http://sudix.github.io/blog/2013/08/20/sieve-of-eratosthenes-with-scala/"/>
    <updated>2013-08-20T12:26:00+09:00</updated>
    <id>http://sudix.github.io/blog/2013/08/20/sieve-of-eratosthenes-with-scala</id>
    <content type="html"><![CDATA[<p>こちらのエントリ
<a href="http://udzura.hatenablog.jp/entry/2013/08/17/021446">もしぼくが採用するなら</a>
を読んで、エラトステネスの篩は知ってはいるものの実装してみたことないなぁと思い、
Scalaで実装してみました。</p>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9">Wikipedia</a>の例題を参考に作ってみます。
考え方としては自然数の集合に対して、小さい順からその倍数を削除していって、
残ったものが素数、という考えです。</p>

<p>最初、こんな感じで実装してみました。</p>

<figure class='code'><figcaption><span>末尾再帰じゃないバージョン</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">numbers</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">numbers</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Nil</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">tail</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">head</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">head</span> <span class="o">::</span> <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">tail</span><span class="o">.</span><span class="n">filterNot</span><span class="o">(</span><span class="k">_</span> <span class="o">%</span> <span class="n">head</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 実行</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="nc">Range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">121</span><span class="o">).</span><span class="n">toList</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>まあこれで動くには動くのですが、最後で再帰の結果に対して演算しているので末尾再帰されてません（@tailrecつけるとコンパイルエラーになる）。
なので数が多くなるとOutOfMemoryで落ちます。</p>

<p>いろいろ考えて、素数の結果リストを引数で渡すようにしました。</p>

<figure class='code'><figcaption><span>末尾再帰バージョン</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.annotation.tailrec</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@tailrec</span>
</span><span class='line'><span class="k">def</span> <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">numbers</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">primes</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">numbers</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">primes</span><span class="o">.</span><span class="n">reverse</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">primes</span><span class="o">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">head</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">tail</span><span class="o">.</span><span class="n">filterNot</span><span class="o">(</span><span class="k">_</span> <span class="o">%</span> <span class="n">head</span> <span class="o">==</span> <span class="mi">0</span><span class="o">),</span> <span class="n">head</span> <span class="o">::</span> <span class="n">primes</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 実行</span>
</span><span class='line'><span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="nc">Range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">120</span><span class="o">).</span><span class="n">toList</span><span class="o">,</span> <span class="nc">Nil</span><span class="o">).</span><span class="n">_2</span>
</span></code></pre></td></tr></table></div></figure>


<p>末尾再帰になった！しかし実行時に引数にNilを渡したり、結果がタプルなので結果取得にひと手間かかったり、かっこ悪すぎ。<br/>
なので隠蔽を図った結果がこれ。</p>

<figure class='code'><figcaption><span>末尾再帰バージョン（呼び出しをシンプルに）</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.annotation.tailrec</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="n">numbers</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@tailrec</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">sieve</span><span class="o">(</span><span class="n">numbers</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="n">primes</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span><span class="k">:</span> <span class="o">(</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">],</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">numbers</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Nil</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">primes</span><span class="o">.</span><span class="n">reverse</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">sieve</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">primes</span><span class="o">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">head</span> <span class="o">::</span> <span class="n">tail</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="n">sieve</span><span class="o">(</span><span class="n">tail</span><span class="o">.</span><span class="n">filterNot</span><span class="o">(</span><span class="k">_</span> <span class="o">%</span> <span class="n">head</span> <span class="o">==</span> <span class="mi">0</span><span class="o">),</span> <span class="n">head</span> <span class="o">::</span> <span class="n">primes</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">sieve</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="nc">Nil</span><span class="o">).</span><span class="n">_2</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 実行</span>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">sieveOfEratosthenes</span><span class="o">(</span><span class="nc">Range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">121</span><span class="o">).</span><span class="n">toList</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>できたけどなんかゴチャゴチャしてる感じがありますね・・・。きっともっと素敵な書き方があるはず。<br/>
ということでググってみると、<br/>
<a href="http://mogproject.blogspot.jp/2013/05/sieve-of-eratosthenes-in-scala.html">Sieve of Eratosthenes in Scala</a><br/>
こちらの記事を発見。おお、Stream使うとこんなにもスッキリ書けるんですね。確かに衝撃的。<br/>
まだまだScala力が足りません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctopressとGitHub Pagesでブログを始めてみた]]></title>
    <link href="http://sudix.github.io/blog/2013/08/05/move-to-octopress/"/>
    <updated>2013-08-05T16:42:00+09:00</updated>
    <id>http://sudix.github.io/blog/2013/08/05/move-to-octopress</id>
    <content type="html"><![CDATA[<p>これまではてなダイアリーを使ってきましたが、<br/>
octopressを知って面白そうだったので導入してみました。<br/>
「A blogging framework for hackers.」<br/>
とか言われたら使うしかないですよね。<br/>
導入も簡単だし、markdownで記事書けるし楽しそうなので、<br/>
しばらく使ってみます。</p>

<hr />

<h1>参考にさせていただいたサイト</h1>

<p><a href="http://onigra.github.io/blog/2013/04/28/introduction-of-octopress/">OctopressとGitHub Pagesを使用したブログの構築手順</a></p>

<p><a href="http://randd.kwappa.net/2013/04/16/521">Octopress で GitHub Pages を置き換える</a></p>

<hr />

<h1>環境</h1>

<ul>
<li>Ubuntu 13.04</li>
<li>Ruby 1.9.3</li>
</ul>


<hr />

<h1>Octpressの設定</h1>

<h2>Octopressをfork</h2>

<p>Octopressをダウンロードする前に、自分のリポジトリにforkしておくのをお勧めします。<br/>
いきなりcloneしてもいいのですが、forkしておけば変更後そのままpushすることで、<br/>
GitHub上でソースを管理することができます。<br/>
<a href="https://github.com/imathis/octopress">こちら</a>からforkしましょう。</p>

<h2>Octopressをダウンロード</h2>

<p>cloneするだけです。</p>

<figure class='code'><figcaption><span>Octopressのダウンロード</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:sudix/octopress.git
</span></code></pre></td></tr></table></div></figure>


<h2>初期設定</h2>

<p>rubyのバージョン設定と、必要なgemのインストールを実行します。<br/>
rubyのバージョン設定は自分の環境に合わせて.rbenv-versionを書き換える事になります。<br/>
自分の環境だとubuntuのパッケージから入れたので「1.9.3-debian」となります。<br/>
これを設定しておかないと動きません。<br/>
また、gemのインストールはbundlerを使って、vendor/bundle以下にインストールしています。<br/>
参考：<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<figure class='code'><figcaption><span>Octopressの初期設定</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;1.9.3-debian&quot;</span> &gt; .rbenv-version
</span><span class='line'><span class="nv">$ </span>sudo gem install bundler
</span><span class='line'><span class="nv">$ </span>bundle install --path vendor/bundle
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake install
</span></code></pre></td></tr></table></div></figure>


<h2>プレビュー</h2>

<p>以下のコマンドを実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>これで次のURLでプレビューできるようになります。<br/>
<a href="http://localhost:4000/">http://localhost:4000/</a></p>

<h2>テーマ</h2>

<p>テーマの設定が可能です。以下からお好みのテーマを探してみてください。<br/>
<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd party themes</a></p>

<p>今回はこのテーマを使ってみます。<br/>
<a href="https://github.com/shashankmehta/greyshade">greyshade</a></p>

<figure class='code'><figcaption><span>テーマのインストール</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone git@github.com:shashankmehta/greyshade.git .themes/greyshade
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;\$greyshade: #073642;&quot;</span> &gt;&gt; sass/custom/_colors.scss //Substitue <span class="s1">&#39;color&#39;</span> with your highlight color
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake <span class="s2">&quot;install[greyshade]&quot;</span>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake generate
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<h2>コンフィグ</h2>

<p>参考:<a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a><br/>
_config.ymlを編集し、各種設定を行います。変更した箇所だけを抜粋しています。</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://sudix.github.io</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Sudix Blog</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my blog about programming, IT, etc...</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sudix</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">about programming, IT, etc...</span>
</span><span class='line'><span class="l-Scalar-Plain">date_format</span><span class="p-Indicator">:</span> <span class="s">&quot;%Y/%m/%d&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="s">&quot;youremailaddress@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>Githubの設定</h1>

<h2>create repository</h2>

<p>手順:<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<p>Github pages用のリポジトリを作っておく必要があります。<br/>
「自分のユーザー名.github.io」という名前のリポジトリになります。<br/>
自分の場合だと「sudix.github.io」ですね。<br/>
octopressの上記手順で説明のある.comではなく.ioで作る必要があるようです。<br/>
昔と変わったのでしょうか。<br/>
<a href="https://help.github.com/articles/user-organization-and-project-pages">Github Pagesのマニュアル</a></p>

<p>リポジトリ作成はこちらから。<a href="https://github.com/new">https://github.com/new</a></p>

<hr />

<h1>デプロイ＆公開</h1>

<p>いよいよ公開してみます。</p>

<h2>リポジトリの登録</h2>

<p>rake setup_github_pagesを実行するとRepository urlを入力しろと聞かれるので、<br/>
先ほど作ったリポジトリ（git@github.com:sudix/sudix.github.io）を入力します。</p>

<figure class='code'><figcaption><span>リポジトリの登録</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake setup_github_pages
</span><span class='line'>Enter the <span class="nb">read</span>/write url <span class="k">for </span>your repository
</span><span class='line'><span class="o">(</span>For example, <span class="s1">&#39;git@github.com:your_username/your_username.github.io)</span>
</span><span class='line'><span class="s1">           or &#39;</span>https://github.com/your_username/your_username.github.io<span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'>Repository url: git@github.com:sudix/sudix.github.io
</span><span class='line'>rm -rf _deploy
</span><span class='line'>mkdir _deploy
</span><span class='line'><span class="nb">cd </span>_deploy
</span><span class='line'>Initialized empty Git repository in /home/sudix/apps/octopress/_deploy/.git/
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 5a3c02f<span class="o">]</span> Octopress init
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'> create mode 100644 index.html
</span><span class='line'><span class="nb">cd</span> -
</span><span class='line'>---
</span><span class='line'><span class="c">## Now you can deploy to http://sudix.github.io/sudix with `rake deploy` ##</span>
</span></code></pre></td></tr></table></div></figure>


<h2>デプロイ</h2>

<p>以下のコマンドでデプロイされます。</p>

<figure class='code'><figcaption><span>デプロイ実行</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<h3>公開されたか確認</h3>

<p>Github Pagesを開いてみて、公開されたか確認してみましょう。<br/>
なお、デプロイして10分ほど待つ必要があるみたいです。<br/>
<a href="http://sudix.github.io/">http://sudix.github.io/</a></p>

<hr />

<h1>コメント欄を追加</h1>

<p><a href="http://disqus.com/">DISQUS</a>を使って、コメント欄を追加することもできます。<br/>
<a href="http://disqus.com/">DISQUS</a>に登録するとshort nameが発行されるので、<br/>
それを_config.ymlに設定するだけです。</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Disqus Comments                                                                                                                       </span>
</span><span class='line'><span class="l-Scalar-Plain">disqus_short_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sudixsblog</span>
</span><span class='line'><span class="l-Scalar-Plain">disqus_show_comment_count</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>追加した後、generateし直せば、下にコメント欄が表示されるはずです。</p>

<hr />

<h1>記事を書く</h1>

<p>さっそく記事を書いてみましょう。
手順:<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>

<h2>ファイル作成</h2>

<p>rakeでnew_postを実行すれば記事を記入するためのmarkdownファイルが作成されます。<br/>
new_postの後にタイトルを入力しましょう。<br/>
ここで指定したタイトルを使ってパーマネントリンクが作成されます。<br/>
タイトルは日本語不可のようです。</p>

<figure class='code'><figcaption><span>記事の作成</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;my first octopress article&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>タイトルの編集</h2>

<p>作成されたファイルを開くと、先頭にyamlで記述された設定があるので、<br/>
タイトルを変更したい場合はその中のtitleを編集します。</p>

<figure class='code'><figcaption><span>./source/_posts/yyyy-mm-dd-my-first-octopress-article.markdown</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">page</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Octopressでの初めての記事&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2013-08-06 20:59</span>
</span><span class='line'><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">sharing</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">footer</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<h2>記事の編集と公開</h2>

<p>あとはmarkdown形式で記事を書き、generateとdeployを実行すれば、記事が公開されます。</p>

<h2>おまけ コードスニペットの書き方</h2>

<p>gist使ったり色々と書き方はあるみたいです。<br/>
参考:<a href="http://octopress.org/docs/blogging/code/">http://octopress.org/docs/blogging/code/</a><br/>
基本はバッククォートで囲みます。言語も指定可能です。</p>

<pre><code>```ruby Test.rb
def hoge
  puts "hogefuga"
  1 + 2
end
```
</code></pre>

<p>と書けば、以下のように。</p>

<figure class='code'><figcaption><span>Test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">hoge</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;hogefuga&quot;</span>
</span><span class='line'>  <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scalaだって</p>

<pre><code>```scala Hoge.scala
object Hoge {
  def main(args: Array[String]) {
    println("hoge")
  }
}
```
</code></pre>

<p>↓</p>

<figure class='code'><figcaption><span>Hoge.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Hoge</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;hoge&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>綺麗に表示されて楽しいですね！</p>
]]></content>
  </entry>
  
</feed>
