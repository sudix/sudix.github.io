<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: goroutine | Sudix's Blog]]></title>
  <link href="http://sudix.github.io/blog/categories/goroutine/atom.xml" rel="self"/>
  <link href="http://sudix.github.io/"/>
  <updated>2014-03-27T16:49:22+09:00</updated>
  <id>http://sudix.github.io/</id>
  <author>
    <name><![CDATA[sudix]]></name>
    <email><![CDATA[sudix7755@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goで重い処理を並列実行して実行時間を短くするサンプル]]></title>
    <link href="http://sudix.github.io/blog/2014/03/18/golang-concurrent/"/>
    <updated>2014-03-18T20:59:00+09:00</updated>
    <id>http://sudix.github.io/blog/2014/03/18/golang-concurrent</id>
    <content type="html"><![CDATA[<p>時間のかかる処理を複数実行して、最後に各処理の結果をがっちゃんこしたい。
そのまま行うと各処理の実行時間の合計だけかかってしまうので、
golangで並列で実行する場合のサンプルを書いてみた。</p>

<p>goroutineについてはこちらを参考にさせていただいた。</p>

<p><a href="http://jxck.hatenablog.com/entry/20130414/1365960707">Go の並行処理 &ndash; Block Rockin’ Codes</a></p>

<h2>コード</h2>

<p>main.go</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>    "fmt"
    "time"
</code></pre>

<p>)</p>

<p>func wait(waitSec time.Duration) &lt;-chan float64 {</p>

<pre><code>    ch := make(chan float64)
    go func() {
            start := time.Now()
            time.Sleep(waitSec * time.Second)
            end := time.Now()
            ch &lt;- end.Sub(start).Seconds()
    }()
    return ch
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>    cpus := runtime.NumCPU()
    runtime.GOMAXPROCS(cpus)

    start := time.Now()

    ch1 := wait(5)
    ch2 := wait(10)
    ch3 := wait(3)

    ret1 := &lt;-ch1
    ret2 := &lt;-ch2
    ret3 := &lt;-ch3

    fmt.Printf("各処理時間合計 %f sec\n", ret1+ret2+ret3)
    end := time.Now()

    fmt.Printf("実時間 %f sec \n", end.Sub(start).Seconds())
</code></pre>

<p>}
```</p>

<p>channelからの結果取り出しでブロックされてるけど、重い処理自体はブロックされずに
別goroutineで実行されているので、今回の目的ならこれで問題ないはず。</p>

<h2>実行結果</h2>

<p><code>bash
$ go run main.go
各処理時間合計 18.002096 sec
実時間 10.000841 sec
</code></p>

<p>指定秒数だけ待つ関数を呼んでいる。それぞれ5秒、10秒、3秒なので、
普通に実行すれば全体で18秒かかるけど、実際には10秒で終わっている。
今回はSleepしてるだけだからあまり関係ないけど、実際に重い計算をさせる場合は、
マルチコア環境なら並行に処理が行われて、CPUリソースを活かせる。
こんなにお手軽に並列処理ができて、goroutineは面白い。</p>
]]></content>
  </entry>
  
</feed>
